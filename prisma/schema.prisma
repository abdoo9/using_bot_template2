generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  OWNER
}

enum BotType {
  OWNER_OWNED_MAKER
  USER_OWNED_MAKER
  REGULAR
}

enum ChatType {
  private
  group
  supergroup
  channel
}

model User {
  userId            BigInt         @id @map("user_id")
  role              Role           @default(USER)
  subscriptions     Subscription[]
  botsOwned         Bot[]          @relation("botsOwned")
  ChatsOwned        Chat[]         @relation("chatsOwned")
  messagesSent      Message[]      @relation("UserSentMessage")
  firstName         String         @default("first_name") @map("first_name")
  lastName          String?        @map("last_name")
  username          String?        @map("username") @db.VarChar(32)
  languageCode      String?        @map("language_code") @db.Char(2)
  userIsDeactivated Boolean        @default(false) @map("user_is_deactivated")
  ChatNotFound      Boolean        @default(false) @map("chat_not_found")
  updatedAt         DateTime       @updatedAt @map("updated_at")
  createdAt         DateTime       @default(now()) @map("created_at")

  @@map(name: "users")
}

model Chat {
  chatId   BigInt   @id @map("chat_id")
  title    String?  @map("title")
  username String?  @map("username") @db.VarChar(32)
  owner    User?    @relation("chatsOwned", fields: [ownerId], references: [userId])
  ownerId  BigInt?  @map("owner_id")
  type     ChatType @map("type")
  Bots     Bot[]

  @@map(name: "chats")
}

model Bot {
  botId       BigInt         @id @map("bot_id")
  token       String         @unique
  owner       User           @relation(name: "botsOwned", fields: [ownerId], references: [userId])
  ownerId     BigInt         @default(527340500) @map("owner_id")
  subscribers Subscription[]
  messages    Message[]
  replies     Reply[]
  adminsGroup Chat?          @relation(fields: [groupId], references: [chatId])
  groupId     BigInt?        @map("group_id")
  firstName   String         @default("bot_name") @map("first_name") @db.VarChar(210) //longest name for a bot in nashrabot db is 206
  username    String         @map("username") @db.VarChar(32)
  active      Boolean        @default(true)
  type        BotType        @default(REGULAR)
  updatedAt   DateTime       @updatedAt @map("updated_at")
  createdAt   DateTime       @default(now()) @map("created_at")

  @@map(name: "bots")
}

model Message {
  id              Int      @id @default(autoincrement()) @map("id")
  sourceMessageId Int      @map("source_message_id")
  destMessageId   Int      @map("dest_message_id")
  bot             Bot      @relation(fields: [botId], references: [botId])
  botId           BigInt   @map("bot_id")
  sourceId        BigInt   @map("source_id")
  source          User     @relation(name: "UserSentMessage", fields: [sourceId], references: [userId])
  destId          BigInt   @map("dest_id")
  groupId         BigInt?  @map("group_id")
  text            String?  @map("text") @db.VarChar(4096)
  updatedAt       DateTime @updatedAt @map("updated_at")
  createdAt       DateTime @default(now()) @map("created_at")

  @@map(name: "messages")
}

model Subscription {
  user         User     @relation(fields: [userId], references: [userId])
  userId       BigInt   @map("user_id")
  bot          Bot      @relation(fields: [botId], references: [botId])
  botId        BigInt   @map("bot_id")
  userIsBanned Boolean  @default(false) @map("user_is_banned")
  botIsBlocked Boolean  @default(false) @map("bot_is_blocked")
  updatedAt    DateTime @updatedAt @map("updated_at")
  createdAt    DateTime @default(now()) @map("created_at")

  @@unique([userId, botId], name: "subscription_pkey")
  @@map(name: "subscriptions")
}

model Reply {
  trigger   String @map("trigger")
  bot       Bot    @relation(fields: [botId], references: [botId])
  botId     BigInt @map("bot_id")
  messageId Int    @map("message_id")
  chatId    BigInt @map("chat_id")

  @@unique([trigger, botId], name: "reply_pkey")
  @@map(name: "replies")
}
